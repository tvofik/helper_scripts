# Parameters:
#   username:
#     Description: Enter name of user to create
#     Type: String
#     Default: 
#   scheduleValue: 
#     Description: Enter a value to run the schedule.
#     Type: Number
#     Default: 12
#   scheduleUnit: 
#     Description: Enter a the unit of time to run the schedule.
#     Type: String
#     Default: hours
#     AllowedValues:
#       - minutes
#       - hours
#       - days
AWSTemplateFormatVersion: 2010-09-09 
Resources:
  SSMDocument: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: >-
          Creates a Windows local user
        parameters:
          username:
            description: (Required) Username to create.
            type: String
            default: ""
          ssmparameter:
            description: (Required) SSM parameter that stores the password of the user.
            type: String
            default: ""
          executionTimeout:
            description:
              (Optional) The time in seconds for a command to complete before it
              is considered to have failed. Default is 3600 (1 hour). Maximum is 28800 (8
              hours).
            type: String
            default: "3600"
            allowedPattern: ([1-9][0-9]{0,3})|(1[0-9]{1,4})|(2[0-7][0-9]{1,3})|(28[0-7][0-9]{1,2})|(28800)
        mainSteps:
          - precondition:
              StringEquals:
                - platformType
                - Windows
            action: aws:runPowerShellScript
            name: runPowerShellScript
            inputs:
              runCommand:
                - |
                  $userName = "{{username}}"
                  $ssmParameter = "{{ssmparameter}}"
                  $checkForUser = (Get-LocalUser).Name -Contains $userName
                  $log_file = 'c:\\log_Create_User.txt'

                  # Check if user exist
                  if ($checkForUser -eq $false) {
                      Write-Host "$userName does not exist, Creating user $userName"
                      Add-Content -Path $log_file -Value "$userName does not exist, Creating user $userName"
                      try {
                          $ssmvalue = (Get-SSMParameterValue -Name $ssmParameter -WithDecryption $true).Parameters.Value
                          $password = ConvertTo-SecureString $ssmvalue -AsPlainText -Force
                          New-LocalUser "$username" -Password $password -ErrorAction stop
                          Write-Host "$username local user created"
                          Add-Content -Path $log_file -Value "$username local user created"
                        } catch {
                          Write-Host "Creating $username user failed"
                          Add-Content -Path $log_file -Value "Creating $username user failed"
                        }
                      } ElseIf ($checkForUser -eq $true) {
                        Write-Host "$userName Exists"
                        Add-Content -Path $log_file -Value "$userName Exists"
                  }
          timeoutSeconds: "{{ executionTimeout }}"
      DocumentFormat: YAML
      DocumentType: Command
      Name: 'CreateUserSSM'






# ScheduledRule: 
#   Type: AWS::Events::Rule
#   Properties: 
#     Description: "ScheduledRule"
#     ScheduleExpression: !Sub 'rate(${scheduleValue} ${scheduleUnit})'
#     # ScheduleExpression: "rate(10 minutes)" !Sub 'rate(${scheduleValue} ${scheduleUnit})'
#     State: "ENABLED"
#     Targets: 
#       - Arn: !GetAtt: 
#             - "SSMDocument"
#             - "Arn"
#         Id: "TargetFunctionV1"
# PermissionForEventsToInvokeLambda: 
#   Type: AWS::Lambda::Permission
#   Properties: 
#     FunctionName: !Ref "LambdaFunction"
#     Action: "lambda:InvokeFunction"
#     Principal: "events.amazonaws.com"
#     SourceArn: 
#       Fn::GetAtt: 
#         - "ScheduledRule"
#         - "Arn"
