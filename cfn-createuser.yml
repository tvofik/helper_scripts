#!
# - EC2 role needs KMS permission to decript password from ssm parameter store

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  username:
    Description: Enter name of user to create
    Type: String
    Default: ''
  scheduleValue:
    Description: Enter a value to run the schedule.
    Type: Number
    Default: 12
  scheduleUnit:
    Description: Enter a the unit of time to run the schedule.
    Type: String
    Default: hours
    AllowedValues:
      - minutes
      - hours
      - days
  tagKey:
    Description: the tag key to look for on instances to run the document
    Type: String
  tagValues:
    Description: the tag key value(s) to look for on instances to run the document e.g. app1, app2, app3.
    Type: CommaDelimitedList
  ssmparameter:
    Description: SSM parameter that stores the password of the user.
    Type: String

Resources:
  SSMDocument:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Creates a Windows local user
        parameters:
          username:
            description: (Required) Username to create.
            type: String
            default: ''
          ssmparameter:
            description: (Required) SSM parameter that stores the password of the user.
            type: String
            default: ''
          executionTimeout:
            description: >-
              (Optional) The time in seconds for a command to complete before it
              is considered to have failed. Default is 3600 (1 hour). Maximum is
              28800 (8 hours).
            type: String
            default: '3600'
            allowedPattern: >-
              ([1-9][0-9]{0,3})|(1[0-9]{1,4})|(2[0-7][0-9]{1,3})|(28[0-7][0-9]{1,2})|(28800)
        mainSteps:
          - precondition:
              StringEquals:
                - platformType
                - Windows
            action: 'aws:runPowerShellScript'
            name: runPowerShellScript
            inputs:
              runCommand:
                - |
                  $userName = "{{username}}"
                  $ssmParameter = "{{ssmparameter}}"
                  $checkForUser = (Get-LocalUser).Name -Contains $userName
                  $log_file = 'c:\\log_Create_User.txt'

                  # Check if user exist
                  if ($checkForUser -eq $false) {
                      Write-Host "$userName does not exist, Creating user $userName"
                      Add-Content -Path $log_file -Value "$userName does not exist, Creating user $userName"
                      try {
                          $ssmvalue = (Get-SSMParameterValue -Name $ssmParameter -WithDecryption $true).Parameters.Value
                          $password = ConvertTo-SecureString $ssmvalue -AsPlainText -Force
                          New-LocalUser "$username" -Password $password -ErrorAction stop
                          Write-Host "$username local user created"
                          Add-Content -Path $log_file -Value "$username local user created"
                        } catch {
                          Write-Host "Creating $username user failed"
                          Add-Content -Path $log_file -Value "Creating $username user failed"
                        }
                      } ElseIf ($checkForUser -eq $true) {
                        Write-Host "$userName Exists"
                        Add-Content -Path $log_file -Value "$userName Exists"
                  }
              timeoutSeconds: '{{ executionTimeout }}'
      DocumentFormat: YAML
      DocumentType: Command
      Name: CreateUserSSM

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: !Sub 'rate(${scheduleValue} ${scheduleUnit})'
      State: "ENABLED"
      Targets:
        - Arn: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${SSMDocument}'
          Id: 'TargetSSMDocV1'
          RoleArn: !GetAtt EventBridgeRole.Arn
          Input: !Sub '{"username": ["${username}"],"ssmparameter": ["${ssmparameter}"]}'
          RunCommandParameters:
            RunCommandTargets:
              - Key: !Sub 'tag:${tagKey}'
                Values: !Ref tagValues

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: 'Role used by AWS EventBridge to run SSM Document.'

  EventBridgeRoleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'ssm:StartAutomationExecution'
            Resource:
              - "arn:*:ssm:*:*:automation-definition/AWS-RunShellScript*"
            Effect: Allow
          - Action:
              - "iam:PassRole"
            Resource:
              - "arn:*:ssm:*:*:role/*"
            Effect: Allow
          - Action:
              - 'ssm:*'
            Resource:
              - "arn:*:ssm:*:*:*"
            Effect: Allow
          - Action:
              - "ssm:SendCommand"
            Resource:
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:*:document/*"
            Effect: Allow
      Roles:
        - !Ref EventBridgeRole
